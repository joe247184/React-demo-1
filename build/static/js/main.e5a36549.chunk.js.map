{"version":3,"sources":["index.js"],"names":["Cell","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","onClick","text","ReactDOM","render","_useState","useState","_useState2","Object","C_Users_86184_Desktop_React_React_demo_1_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","cells","setCells","_useState3","_useState4","finished","setFinished","_useState5","_useState6","n","setN","onClickCell","row","col","copy","JSON","parse","stringify","i","console","log","tell","class","map","items","item","document","getElementById"],"mappings":"iLAMMA,eAAO,SAAUC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMK,SAChCL,EAAMM,QAyEnBC,IAASC,OAAOP,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cApEe,WAAY,IAAAM,EAEDC,mBAAS,CAC/B,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,QALUC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEpBK,EAFoBH,EAAA,GAEbI,EAFaJ,EAAA,GAAAK,EAOKN,oBAAS,GAPdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAOpBE,EAPoBD,EAAA,GAOVE,EAPUF,EAAA,GAAAG,EAQTV,mBAAS,GARAW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAQpBE,EARoBD,EAAA,GAQjBE,EARiBF,EAAA,GA4CrBG,EAAc,SAACC,EAAKC,GAEtBH,EAAKD,EAAI,GAET,IAAMK,EAAOC,KAAKC,MAAMD,KAAKE,UAAUhB,IACvCa,EAAKF,GAAKC,GAAOJ,EAAI,GAAK,EAAI,IAAM,IACpCP,EAASY,GAzCA,SAACb,GACV,IAAK,IAAIiB,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIjB,EAAMiB,GAAG,KAAOjB,EAAMiB,GAAG,IAAMjB,EAAMiB,GAAG,KAAOjB,EAAMiB,GAAG,IACxC,OAAhBjB,EAAMiB,GAAG,GAAa,CACtBC,QAAQC,IAAInB,EAAMiB,GAAG,GAAK,gBAC1BZ,GAAY,GACZ,MAIR,IAAK,IAAIY,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIjB,EAAM,GAAGiB,KAAOjB,EAAM,GAAGiB,IAAMjB,EAAM,GAAGiB,KAAOjB,EAAM,GAAGiB,IACxC,OAAhBjB,EAAM,GAAGiB,GAAa,CACtBC,QAAQC,IAAInB,EAAM,GAAGiB,GAAK,gBAC1BZ,GAAY,GACZ,MAIJL,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,KAETkB,QAAQC,IAAInB,EAAM,GAAG,GAAK,gBAC1BK,GAAY,IAGZL,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,KAETkB,QAAQC,IAAInB,EAAM,GAAG,GAAK,gBAC1BK,GAAY,IAWhBe,CAAKP,IAET,OACI1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKgC,MAAM,WAAUlC,EAAAC,EAAAC,cAAA,mBAAMmB,EAAN,WACpBR,EAAMsB,IAAI,SAACC,EAAOZ,GAAR,OAAgBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACrCiC,EAAMD,IAAI,SAACE,EAAMZ,GAAP,OAAezB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACrCH,EAAAC,EAAAC,cAACJ,EAAD,CAAMO,KAAMgC,EAAMjC,QAAS,kBAAMmB,EAAYC,EAAKC,YAGzDR,GAAYjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,8BAMrB,OACImC,SAASC,eAAe","file":"static/js/main.e5a36549.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport { templateLiteral } from '@babel/types';\n\n\nconst Cell = function (props) {\n    return (\n        <div className=\"cell\" onClick={props.onClick}>\n            {props.text}\n        </div>\n    )\n}\n\n\nconst Chessboard = function () {\n\n    const [cells, setCells] = useState([\n        [null, null, null],\n        [null, null, null],\n        [null, null, null],\n    ])\n    const [finished, setFinished] = useState(false)\n    const [n, setN] = useState(0)\n    const tell = (cells) => {\n        for (let i = 0; i < 3; i++) {\n            if (cells[i][0] === cells[i][1] && cells[i][1] === cells[i][2] &&\n                cells[i][0] !== null) {\n                console.log(cells[i][0] + '赢了')\n                setFinished(true)\n                break;\n            }\n\n        }\n        for (let i = 0; i < 3; i++) {\n            if (cells[0][i] === cells[1][i] && cells[1][i] === cells[2][i] &&\n                cells[0][i] !== null) {\n                console.log(cells[0][i] + '赢了')\n                setFinished(true)\n                break;\n            }\n        }\n        if (\n            cells[0][0] === cells[1][1] &&\n            cells[1][1] === cells[2][2] &&\n            cells[0][0] !== null\n        ) {\n            console.log(cells[0][0] + '赢了')\n            setFinished(true)\n        }\n        if (\n            cells[0][2] === cells[1][1] &&\n            cells[1][1] === cells[2][0] &&\n            cells[1][1] !== null\n        ) {\n            console.log(cells[1][1] + '赢了')\n            setFinished(true)\n        }\n    }\n    const onClickCell = (row, col) => {\n        // n + 1\n        setN(n + 1)\n        // 改变 cells\n        const copy = JSON.parse(JSON.stringify(cells))\n        copy[row][col] = n % 2 == 0 ? 'x' : 'o'\n        setCells(copy)\n        // 判断谁赢\n        tell(copy)\n    }\n    return (\n        <div>\n            <div class=\"wrapper\"><h1>第{n}场</h1></div>\n            {cells.map((items, row) => <div className=\"row\">\n                {items.map((item, col) => <div className=\"col\">\n                    <Cell text={item} onClick={() => onClickCell(row, col)} />\n                </div>)}\n            </div>)}\n            {finished && <div className=\"gameOver\">游戏结束</div>}\n        </div>\n    )\n}\n\nReactDOM.render(<div>\n    <Chessboard />\n</div>, document.getElementById('root'))\n\n\n\n\n"],"sourceRoot":""}